@page "/register"
@using MauiTimesheet.Components.Layout

@layout AuthLayout

@inject AuthService AuthService
@inject NavigationManager NavigationManager

<SectionContent SectionName="title">Register</SectionContent>
<SectionContent SectionName="loginRegisterText">
    <p>Already have an account?</p>
</SectionContent>
<SectionContent SectionName="loginRegisterLink">
    <NavLink href="login" class="mt-3 text-blue-600">Login to your account</NavLink>
</SectionContent>

<EditForm Model="_model" OnValidSubmit="RegisterAsync">
    <DataAnnotationsValidator />
    <div class="mb-4">
        <label class="app-label">Full Name</label>
        <InputText @bind-Value="_model.FullName" placeholder="Enter your name"
                   class="app-input" />
        <ValidationMessage For="@(() => _model.UserName)" class="text-red-500 text-xs mt-2" />
    </div>

    <div class="mb-4">
        <label class="app-label">Username</label> 
        <InputText @bind-Value="_model.UserName" placeholder="Enter username"
                   class="app-input" />
        <ValidationMessage For="@(() => _model.UserName)" class="text-red-500 text-xs mt-2" />
    </div>

    <div class="mb-4">
        <label class="app-label">Password</label>
        <InputText type="password" @bind-Value="_model.Password" placeholder="Enter password"
                   class="app-input" />
        <ValidationMessage For="@(() => _model.Password)" class="text-red-500 text-xs mt-2" />
    </div>
    <button type="submit" class="app-btn">Create Account</button>
</EditForm>


@code {
    private RegisterModel _model = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private async Task RegisterAsync()
    {
        await AuthService.RegisterAsync(_model);
        MauiInterop.AlertAsync("User account created","Success");
        // Navigate to the login page
        NavigationManager.NavigateTo("login", replace: true);
    }
}
