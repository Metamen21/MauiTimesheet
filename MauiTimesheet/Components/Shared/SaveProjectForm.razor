@inject ProjectService ProjectService

<div class="fixed inset-0 z-40 flex items-center justify-center bg-black bg-opacity-50 p-3">
    <div class="w-full rounded-lg bg-white p-3 shadow-lg">
        <h2 class="mb-5 text-xl font-semibold text-gray-600">@(Project.Id > 0 ? "Update project" : "Create new project")</h2>
        <EditForm Model="_project" OnValidSubmit="SaveProjectAsync">
            <DataAnnotationsValidator />
            <div class="mb-3">
                <label class="app-label">Project Name</label>
                <InputText class="app-input" @bind-Value="_project.Name" placeholder="Enter project name" />
                <ValidationMessage For="() => _project.Name" class="app-validation-msg" />
            </div>

            <div class="mb-3">
                <label class="app-label">Project Description</label>
                <InputTextArea class="app-input" @bind-Value="_project.Description" placeholder="Enter project description" />
                <ValidationMessage For="() => _project.Description" class="app-validation-msg" />
            </div>
            <div class="mb-3">
                <label class="app-label">Color</label>
                <div class="flex justify-around gap-2">
                    @foreach (var color in _colorOptions)
                    {
                        <button type="button" class="h-10 w-10 rounded-full border-2 border-transparent"
                                style="background-color:@color;@(_project.Color == color ? $"border-color:black" : "")"
                                @onclick="() => _project.Color = color"></button>
                    }
                </div>
                <ValidationMessage For="() => _project.Description" class="app-validation-msg" />
            </div>
            <div class="mt-3 flex gap-3">
                <button type="button" @onclick="() => OnClose.InvokeAsync()" class="app-btn border-gray-700 bg-white text-gray-700">Cancel</button>
                <button type="submit" class="app-btn">Save Project</button>
            </div>
        </EditForm>
    </div>


</div>


@code {
    [Parameter, EditorRequired]
    public ProjectModel Project { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    [Parameter]
    public EventCallback OnAfterSave { get; set; }

    private ProjectModel _project;

    private static readonly string[] _colorOptions =
    [
        "#007AFF","#34C759","#FF9600","#FF3B30",
    "#AF52DE","#FF2D92"
    ];

    protected override void OnParametersSet()
    {
        _project = Project.Clone();
    }

    private async Task SaveProjectAsync()
    {
        var isSuccess = await ProjectService.SaveProjectAsync(_project);
        if (!isSuccess)
            return;

        await OnAfterSave.InvokeAsync();

    }
}
